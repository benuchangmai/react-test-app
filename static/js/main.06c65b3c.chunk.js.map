{"version":3,"sources":["Components/Images/Joker.jpg","Components/Home.js","Components/Images.js","Components/Body.js","Components/Tab.js","Components/TabList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","className","href","Joker","data-attribute","src","Component","Images","Body","displayContent","activeTab","props","this","Tab","addStyling","tab","id","backgroundColor","style","onClick","changeTab","bind","title","TabList","tabs","map","indTab","App","state","msg","console","log","setState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,mC,kJC4B5BC,EAxBf,uKAOE,OACC,6BACC,oCACA,yBAAKC,UAAU,aACf,kBAAC,IAAD,KACC,uBAAGC,KAAMC,IAAOC,iBAAe,OAC9B,yBAAKC,IAAKF,OAEX,uBAAGD,KAAMC,IAAOC,iBAAe,OAC9B,yBAAKC,IAAKF,cAhBhB,GAA0BG,aCOXC,EATf,uKAEE,OACC,6BACC,2CAJJ,GAA4BD,aCsBbE,EAnBf,4MACCC,eAAiB,WAChB,IAAIC,EAAY,EAAKC,MAAMD,UAC3B,OAAgB,GAAbA,EACM,kBAAC,IAAD,KACR,kBAAC,EAAD,OAIQ,kBAAC,EAAD,OATX,uDAcE,OAAOE,KAAKH,qBAdd,GAA0BH,aCgBXO,EAnBf,4MACCC,WAAa,WACZ,OAAG,EAAKH,MAAMI,IAAIC,IAAM,EAAKL,MAAMD,UAC3B,CAACO,gBAAiB,QAGlB,CAACA,gBAAiB,UAN5B,uDAUE,OACC,yBAAKhB,UAAU,MACfiB,MAAON,KAAKE,aACZK,QAASP,KAAKD,MAAMS,UAAUC,KAAKT,KAAMA,KAAKD,MAAMI,IAAIC,GAAI,QAC3D,4BAAKJ,KAAKD,MAAMI,IAAIO,YAdxB,GAAyBhB,aCWViB,EAVf,uKACW,IAAD,OACR,OAAOX,KAAKD,MAAMa,KAAKC,KAAI,SAACC,GAAD,OACzB,kBAAC,EAAD,CAAKX,IAAKW,EACVN,UAAW,EAAKT,MAAMS,UACrBV,UAAW,EAAKC,MAAMD,mBAL3B,GAA6BJ,aC+CdqB,EA7Cf,kDACE,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXlB,UAAW,GAEb,EAAKU,UAAY,SAACJ,EAAIa,GACpBC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZtB,UAAWM,KARJ,EADf,qDA+BI,OACE,yBAAKf,UAAU,QACb,yBAAKA,UAAU,WACb,kBAAC,EAAD,CAASuB,KAlBF,CACb,CACER,GAAI,EACJM,MAAO,QAET,CACEN,GAAI,EACJM,MAAO,UAET,CACEN,GAAI,EACJM,MAAO,WAQHF,UAAWR,KAAKQ,UAChBV,UAAWE,KAAKgB,MAAMlB,aAExB,yBAAKT,UAAU,aACb,kBAAC,EAAD,CAAMS,UAAWE,KAAKgB,MAAMlB,kBAvCtC,GAAyBJ,aCOL2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,a","file":"static/js/main.06c65b3c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Joker.4d815e0c.jpg\";","import React, { Component } from 'react';\r\nimport { SRLWrapper } from \"simple-react-lightbox\";\r\nimport Joker from './Images/Joker.jpg'\r\n\r\nexport class Home extends Component {\r\n\r\n\r\n\trender() {\r\n\tconst options = {\r\n\t\tthumbnailsSize : [\"300px\",\"500px\"],\r\n\t}\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h1>Home</h1>\r\n\t\t\t\t<div className=\"landscape\">\r\n\t\t\t\t<SRLWrapper >\r\n\t\t\t\t\t<a href={Joker} data-attribute=\"SRL\">\r\n\t\t\t\t\t\t<img src={Joker}/>\r\n\t\t\t\t\t</a>\r\n\t\t\t\t\t<a href={Joker} data-attribute=\"SRL\">\r\n\t\t\t\t\t\t<img src={Joker}/>\r\n\t\t\t\t\t</a>\r\n\t\t\t\t</SRLWrapper>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nexport default Home;","import React, { Component } from 'react';\r\n\r\nexport class Images extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h1>Images</h1>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nexport default Images;","import React, { Component } from 'react';\r\nimport Home from './Home'\r\nimport Images from './Images'\r\nimport SimpleReactLightbox from \"simple-react-lightbox\"; \r\n\r\nexport class Body extends Component {\r\n\tdisplayContent = () => {\r\n\t\tvar activeTab = this.props.activeTab\r\n\t\tif(activeTab == 1)\r\n\t\t\treturn (<SimpleReactLightbox>\r\n\t\t\t<Home/>\r\n\t\t</SimpleReactLightbox>)\r\n\r\n\t\telse if(activeTab == 2)\r\n\t\t\treturn (<Images/>)\r\n\t\telse\r\n\t\t\treturn (<Images/>)\r\n\t}\r\n\trender() {\r\n\t\treturn this.displayContent()\r\n\t\t\r\n\t\t\r\n\t}\r\n}\r\nexport default Body;","import React, { Component } from 'react';\r\n\r\nexport class Tab extends Component {\r\n\taddStyling = () => {\r\n\t\tif(this.props.tab.id == this.props.activeTab){\r\n\t\t\treturn {backgroundColor: 'gray'}\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn {backgroundColor: 'white'}\r\n\t\t}\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className='tab'\r\n\t\t\tstyle={this.addStyling()}\r\n\t\t\tonClick={this.props.changeTab.bind(this, this.props.tab.id, \"hey\")}>\r\n\t\t\t\t<h2>{this.props.tab.title}</h2>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nexport default Tab;","import React, { Component } from 'react';\r\nimport Tab from './Tab'\r\n\r\nexport class TabList extends Component {\r\n\trender() {\r\n\t\treturn this.props.tabs.map((indTab) =>(\r\n\t\t\t\t<Tab tab={indTab}\r\n\t\t\t\tchangeTab={this.props.changeTab}\r\n\t\t\t\t activeTab={this.props.activeTab}/>\r\n\t\t\t\t\r\n\t\t\t));\r\n\t}\r\n}\r\nexport default TabList;","import React, { Component } from 'react';\nimport './App.css'\nimport Body from './Components/Body'\nimport TabList from './Components/TabList'\n\nexport class App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      activeTab: 1\n    }\n    this.changeTab = (id, msg) => {\n      console.log(msg);\n      this.setState({\n        activeTab: id\n      })\n    }\n  }\n\n\n  render() {\n    const tabs = [\n    {\n      id: 1,\n      title: 'Home'\n    },\n    {\n      id: 2,\n      title: 'Images'\n    },\n    {\n      id: 3,\n      title: 'Videos'\n    }\n    ]\n\n    return (\n      <div className=\"body\">\n        <div className=\"nav-bar\">\n          <TabList tabs={tabs} \n          changeTab={this.changeTab}\n          activeTab={this.state.activeTab}/>\n        </div>\n        <div className=\"main-body\">\n          <Body activeTab={this.state.activeTab}/>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}